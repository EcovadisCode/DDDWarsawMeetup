// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ev.Subsidiaries.Domain.UnitTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SubsidiariesLinkageFeature : Xunit.IClassFixture<SubsidiariesLinkageFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SubsidiariesLinkage.feature"
#line hidden
        
        public SubsidiariesLinkageFeature(SubsidiariesLinkageFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Subsidiaries Linkage", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Creating pending link")]
        [Xunit.TraitAttribute("FeatureTitle", "Subsidiaries Linkage")]
        [Xunit.TraitAttribute("Description", "Creating pending link")]
        public virtual void CreatingPendingLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating pending link", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
 testRunner.Given("Two suppliers SpaceX Europe and SpaceX Poland", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When("I create pending link for SpaceX Poland as subsidiary of SpaceX Europe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.Then("Pending link is created for SpaceX Poland as subsidiary of SpaceX Europe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Creating accepted link")]
        [Xunit.TraitAttribute("FeatureTitle", "Subsidiaries Linkage")]
        [Xunit.TraitAttribute("Description", "Creating accepted link")]
        public virtual void CreatingAcceptedLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating accepted link", null, ((string[])(null)));
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
 testRunner.Given("Two suppliers SpaceX Europe and SpaceX Poland", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When("I create accepted link for SpaceX Poland as subsidiary of SpaceX Europe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("Accepted link is created for SpaceX Poland as subsidiary of SpaceX Europe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Accepting link")]
        [Xunit.TraitAttribute("FeatureTitle", "Subsidiaries Linkage")]
        [Xunit.TraitAttribute("Description", "Accepting link")]
        [Xunit.InlineDataAttribute("SpaceX Poland", "SpaceX Europe", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("SpaceX Poland", "SpaceX Europe", "Declined", new string[0])]
        public virtual void AcceptingLink(string subsidiary, string parent, string status, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accepting link", null, exampleTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 14
 testRunner.Given(string.Format("{0} link between {1} and {2}", status, subsidiary, parent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("I accept the link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("Link is accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Declining link")]
        [Xunit.TraitAttribute("FeatureTitle", "Subsidiaries Linkage")]
        [Xunit.TraitAttribute("Description", "Declining link")]
        [Xunit.InlineDataAttribute("SpaceX Poland", "SpaceX Europe", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("SpaceX Poland", "SpaceX Europe", "Accepted", new string[0])]
        public virtual void DecliningLink(string subsidiary, string parent, string status, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Declining link", null, exampleTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 23
 testRunner.Given(string.Format("{0} link between {1} and {2}", status, subsidiary, parent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When("I decline the link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("Link is declined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Removing link")]
        [Xunit.TraitAttribute("FeatureTitle", "Subsidiaries Linkage")]
        [Xunit.TraitAttribute("Description", "Removing link")]
        [Xunit.InlineDataAttribute("SpaceX Poland", "SpaceX Europe", "Pending", new string[0])]
        [Xunit.InlineDataAttribute("SpaceX Poland", "SpaceX Europe", "Declined", new string[0])]
        [Xunit.InlineDataAttribute("SpaceX Poland", "SpaceX Europe", "Accepted", new string[0])]
        public virtual void RemovingLink(string subsidiary, string parent, string status, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing link", null, exampleTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 32
 testRunner.Given(string.Format("{0} link between {1} and {2}", status, subsidiary, parent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I remove the link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("Link is removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cannot set supplier\'s subsidiary as a parent")]
        [Xunit.TraitAttribute("FeatureTitle", "Subsidiaries Linkage")]
        [Xunit.TraitAttribute("Description", "Cannot set supplier\'s subsidiary as a parent")]
        public virtual void CannotSetSuppliersSubsidiaryAsAParent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot set supplier\'s subsidiary as a parent", null, ((string[])(null)));
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 42
 testRunner.Given("SpaceX Poland as subsidiary of SpaceX Europe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When("I create link for SpaceX Europe as subsidiary of SpaceX Poland", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("Action is denied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Can set supplier\'s grand subsidiary as parent")]
        [Xunit.TraitAttribute("FeatureTitle", "Subsidiaries Linkage")]
        [Xunit.TraitAttribute("Description", "Can set supplier\'s grand subsidiary as parent")]
        public virtual void CanSetSuppliersGrandSubsidiaryAsParent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can set supplier\'s grand subsidiary as parent", null, ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 47
 testRunner.Given("SpaceX with subsidiary SpaceX Europe with subsidiary SpaceX Poland", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.When("I create link for SpaceX as subsidiary of SpaceX Poland", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("Link is created for SpaceX as subsidiary of SpaceX Poland", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SubsidiariesLinkageFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SubsidiariesLinkageFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
